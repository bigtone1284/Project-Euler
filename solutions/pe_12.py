"""============================================================================
Project Euler 12

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred 
divisors?

Solution:  First I wrote a function to generate triangle numbers.  Then I 
wrote a function to find all factors of a number.  

Note:  There is work to be done in optimizing this problem for finding factors.
I have made the first minor improvement, using a range of 1-sqrt(n) and 
counting two factors.  This can be made more optimal by using the exponents of
prime factorization.  
============================================================================"""

import tmath as t

import tmath as t

def main():
	gen = t.gen_triangle_numbers()
	m = 0
	while m <= 500:
		p = gen.next()
		m = t.num_factors(p)
	return p
